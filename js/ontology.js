// Generated by CoffeeScript 1.6.1
(function() {
  var AnnotationParser, ClassParser, DataPropertyParser, DataTypeParser, IndividualParser, ObjectPropertyParser, Ontology, OntologyAnnotation, OntologyAnnotationDomainClassRelation, OntologyAnnotationParentSubRelation, OntologyAnnotationRangeClassRelation, OntologyAnnotationValueRelation, OntologyBase, OntologyCharacteristic, OntologyClass, OntologyClassDisjointRelation, OntologyClassEquivalentRelation, OntologyClassIndividualRelation, OntologyClassParentSubRelation, OntologyDataProperty, OntologyDataPropertyDisjointRelation, OntologyDataPropertyDomainClassRelation, OntologyDataPropertyEquivalentRelation, OntologyDataPropertyParentSubRelation, OntologyDataPropertyRangeDataTypeRelation, OntologyDataType, OntologyIndividual, OntologyIndividualDataPropertyValueRelation, OntologyIndividualDifferentRelation, OntologyIndividualObjectPropertyValueRelation, OntologyIndividualSameRelation, OntologyObjectProperty, OntologyObjectPropertyDisjointRelation, OntologyObjectPropertyDomainClassRelation, OntologyObjectPropertyEquivalentRelation, OntologyObjectPropertyInverseRelation, OntologyObjectPropertyParentSubRelation, OntologyObjectPropertyRangeClassRelation, OwlParser,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OntologyBase = (function() {

    function OntologyBase() {}

    OntologyBase.prototype.get_name = function(iri) {
      var position, sections;
      position = iri.indexOf('#');
      if (position === 0) {
        return iri.substring(1);
      }
      sections = iri.split(':');
      return sections[1];
    };

    return OntologyBase;

  })();

  jQuery.extend(window, {
    OntologyBase: OntologyBase
  });

  OntologyClassParentSubRelation = (function() {

    function OntologyClassParentSubRelation(parent, sub) {
      this.parent = parent;
      this.sub = sub;
      this.type = "parent-sub";
    }

    return OntologyClassParentSubRelation;

  })();

  OntologyClassEquivalentRelation = (function() {

    function OntologyClassEquivalentRelation(classes) {
      this.classes = classes;
      this.type = "equivalent";
    }

    return OntologyClassEquivalentRelation;

  })();

  OntologyClassDisjointRelation = (function() {

    function OntologyClassDisjointRelation(classes) {
      this.classes = classes;
      this.type = "disjoint";
    }

    return OntologyClassDisjointRelation;

  })();

  OntologyClassIndividualRelation = (function() {

    function OntologyClassIndividualRelation(clazz, individual) {
      this["class"] = clazz;
      this.individual = individual;
      this.type = "class-individual";
    }

    return OntologyClassIndividualRelation;

  })();

  OntologyIndividualSameRelation = (function() {

    function OntologyIndividualSameRelation(individuals) {
      this.individuals = individuals;
      this.type = "individual-same";
    }

    return OntologyIndividualSameRelation;

  })();

  OntologyIndividualDifferentRelation = (function() {

    function OntologyIndividualDifferentRelation(individuals) {
      this.individuals = individuals;
      this.type = "individual-different";
    }

    return OntologyIndividualDifferentRelation;

  })();

  OntologyAnnotationParentSubRelation = (function() {

    function OntologyAnnotationParentSubRelation(parent, sub) {
      this.parent = parent;
      this.sub = sub;
      this.type = "annotation-parent-sub";
    }

    return OntologyAnnotationParentSubRelation;

  })();

  OntologyAnnotationDomainClassRelation = (function() {

    function OntologyAnnotationDomainClassRelation(clazz, annotation) {
      this["class"] = clazz;
      this.annotation = annotation;
      this.type = "annotation-domain-class";
    }

    return OntologyAnnotationDomainClassRelation;

  })();

  OntologyAnnotationRangeClassRelation = (function() {

    function OntologyAnnotationRangeClassRelation(clazz, annotation) {
      this["class"] = clazz;
      this.annotation = annotation;
      this.type = "annotation-range-class";
    }

    return OntologyAnnotationRangeClassRelation;

  })();

  OntologyObjectPropertyParentSubRelation = (function() {

    function OntologyObjectPropertyParentSubRelation(parent, sub) {
      this.parent = parent;
      this.sub = sub;
      this.type = "object-property-parent-sub";
    }

    return OntologyObjectPropertyParentSubRelation;

  })();

  OntologyObjectPropertyEquivalentRelation = (function() {

    function OntologyObjectPropertyEquivalentRelation(object_properties) {
      this.object_properties = object_properties;
      this.type = "object-property-equivalent";
    }

    return OntologyObjectPropertyEquivalentRelation;

  })();

  OntologyObjectPropertyInverseRelation = (function() {

    function OntologyObjectPropertyInverseRelation(object_properties) {
      this.object_properties = object_properties;
      this.type = "object-property-inverse";
    }

    return OntologyObjectPropertyInverseRelation;

  })();

  OntologyObjectPropertyDisjointRelation = (function() {

    function OntologyObjectPropertyDisjointRelation(object_properties) {
      this.object_properties = object_properties;
      this.type = "object-property-disjoint";
    }

    return OntologyObjectPropertyDisjointRelation;

  })();

  OntologyObjectPropertyDomainClassRelation = (function() {

    function OntologyObjectPropertyDomainClassRelation(object_property, clazz) {
      this.object_property = object_property;
      this["class"] = clazz;
      this.type = "object-property-domain-class";
    }

    return OntologyObjectPropertyDomainClassRelation;

  })();

  OntologyObjectPropertyRangeClassRelation = (function() {

    function OntologyObjectPropertyRangeClassRelation(object_property, clazz) {
      this.object_property = object_property;
      this["class"] = clazz;
      this.type = "object-property-range-class";
    }

    return OntologyObjectPropertyRangeClassRelation;

  })();

  OntologyDataPropertyEquivalentRelation = (function() {

    function OntologyDataPropertyEquivalentRelation(data_properties) {
      this.data_properties = data_properties;
      this.type = "data-property-equivalent";
    }

    return OntologyDataPropertyEquivalentRelation;

  })();

  OntologyDataPropertyParentSubRelation = (function() {

    function OntologyDataPropertyParentSubRelation(parent, sub) {
      this.parent = parent;
      this.sub = sub;
      this.type = "data-property-parent-sub";
    }

    return OntologyDataPropertyParentSubRelation;

  })();

  OntologyDataPropertyDisjointRelation = (function() {

    function OntologyDataPropertyDisjointRelation(data_properties) {
      this.data_properties = data_properties;
      this.type = "data-property-disjoint";
    }

    return OntologyDataPropertyDisjointRelation;

  })();

  OntologyDataPropertyDomainClassRelation = (function() {

    function OntologyDataPropertyDomainClassRelation(data_property, clazz) {
      this.data_property = data_property;
      this["class"] = clazz;
      this.type = "data-property-domain-class";
    }

    return OntologyDataPropertyDomainClassRelation;

  })();

  OntologyDataPropertyRangeDataTypeRelation = (function() {

    function OntologyDataPropertyRangeDataTypeRelation(data_property, data_type) {
      this.data_property = data_property;
      this.data_type = data_type;
      this.type = "data-property-range-data-type";
    }

    return OntologyDataPropertyRangeDataTypeRelation;

  })();

  OntologyAnnotationValueRelation = (function() {

    function OntologyAnnotationValueRelation(host, annotation, data_type, value) {
      this.host = host;
      this.annotation = annotation;
      this.data_type = data_type;
      this.value = value;
      this.type = "annotation-value";
    }

    return OntologyAnnotationValueRelation;

  })();

  OntologyIndividualObjectPropertyValueRelation = (function() {

    function OntologyIndividualObjectPropertyValueRelation(host, object_property, value) {
      this.host = host;
      this.object_property = object_property;
      this.value = value;
      this.type = "object-property-value";
    }

    return OntologyIndividualObjectPropertyValueRelation;

  })();

  OntologyIndividualDataPropertyValueRelation = (function() {

    function OntologyIndividualDataPropertyValueRelation(host, data_property, data_type, value) {
      this.host = host;
      this.data_property = data_property;
      this.data_type = data_type;
      this.value = value;
      this.type = "data-property-value";
    }

    return OntologyIndividualDataPropertyValueRelation;

  })();

  jQuery.extend(window, {
    OntologyClassParentSubRelation: OntologyClassParentSubRelation,
    OntologyClassEquivalentRelation: OntologyClassEquivalentRelation,
    OntologyClassDisjointRelation: OntologyClassDisjointRelation,
    OntologyClassIndividualRelation: OntologyClassIndividualRelation,
    OntologyIndividualSameRelation: OntologyIndividualSameRelation,
    OntologyIndividualDifferentRelation: OntologyIndividualDifferentRelation,
    OntologyAnnotationParentSubRelation: OntologyAnnotationParentSubRelation,
    OntologyAnnotationDomainClassRelation: OntologyAnnotationDomainClassRelation,
    OntologyAnnotationRangeClassRelation: OntologyAnnotationRangeClassRelation,
    OntologyObjectPropertyParentSubRelation: OntologyObjectPropertyParentSubRelation,
    OntologyObjectPropertyEquivalentRelation: OntologyObjectPropertyEquivalentRelation,
    OntologyObjectPropertyInverseRelation: OntologyObjectPropertyInverseRelation,
    OntologyObjectPropertyDisjointRelation: OntologyObjectPropertyDisjointRelation,
    OntologyObjectPropertyDomainClassRelation: OntologyObjectPropertyDomainClassRelation,
    OntologyObjectPropertyRangeClassRelation: OntologyObjectPropertyRangeClassRelation,
    OntologyDataPropertyEquivalentRelation: OntologyDataPropertyEquivalentRelation,
    OntologyDataPropertyParentSubRelation: OntologyDataPropertyParentSubRelation,
    OntologyDataPropertyDisjointRelation: OntologyDataPropertyDisjointRelation,
    OntologyDataPropertyDomainClassRelation: OntologyDataPropertyDomainClassRelation,
    OntologyDataPropertyRangeDataTypeRelation: OntologyDataPropertyRangeDataTypeRelation,
    OntologyAnnotationValueRelation: OntologyAnnotationValueRelation,
    OntologyIndividualObjectPropertyValueRelation: OntologyIndividualObjectPropertyValueRelation,
    OntologyIndividualDataPropertyValueRelation: OntologyIndividualDataPropertyValueRelation
  });

  Ontology = (function() {

    function Ontology(owl_parser) {
      this.annotations = owl_parser.annotation_parser.annotations;
      this.classes = owl_parser.class_parser.classes;
      this.individuals = owl_parser.individual_parser.individuals;
      this.object_properties = owl_parser.object_property_parser.object_properties;
      this.data_properties = owl_parser.data_property_parser.data_properties;
      this.data_types = owl_parser.data_type_parser.data_types;
      this._build_top_attr();
    }

    Ontology.prototype._build_top_attr = function() {
      this.top_classes = this.classes.filter(function(clazz) {
        return clazz.is_top();
      });
      return this.top_individuals = this.individuals.filter(function(individual) {
        return individual.is_top();
      });
    };

    return Ontology;

  })();

  jQuery.extend(window, {
    Ontology: Ontology
  });

  OntologyAnnotation = (function(_super) {

    __extends(OntologyAnnotation, _super);

    function OntologyAnnotation(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.relations = [];
    }

    OntologyAnnotation.prototype.add_relation = function(relation) {
      return this.relations.push(relation);
    };

    return OntologyAnnotation;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyAnnotation: OntologyAnnotation
  });

  OntologyCharacteristic = (function() {

    OntologyCharacteristic.FUNCTIONAL = new OntologyCharacteristic('FUNCTIONAL');

    OntologyCharacteristic.INVERSE_FUNCTIONAL = new OntologyCharacteristic('INVERSE_FUNCTIONAL');

    OntologyCharacteristic.SYMMETRIC = new OntologyCharacteristic('SYMMETRIC');

    OntologyCharacteristic.ASYMMETRIC = new OntologyCharacteristic('ASYMMETRIC');

    OntologyCharacteristic.TRANSITIVE = new OntologyCharacteristic('TRANSITIVE');

    OntologyCharacteristic.REFLEXIVE = new OntologyCharacteristic('REFLEXIVE');

    OntologyCharacteristic.IRREFLEXIVE = new OntologyCharacteristic('IRREFLEXIVE');

    function OntologyCharacteristic(name) {
      this.name = name;
    }

    return OntologyCharacteristic;

  })();

  jQuery.extend(window, {
    OntologyCharacteristic: OntologyCharacteristic
  });

  OntologyClass = (function(_super) {

    __extends(OntologyClass, _super);

    function OntologyClass(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.relations = [];
      this.object_properties = [];
      this.data_properties = [];
    }

    OntologyClass.prototype.add_relation = function(relation) {
      return this.relations.push(relation);
    };

    OntologyClass.prototype.add_object_property = function(object_property) {
      return this.object_properties.push(object_property);
    };

    OntologyClass.prototype.add_data_property = function(data_property) {
      return this.data_properties.push(data_property);
    };

    OntologyClass.prototype.is_top = function() {
      var relations,
        _this = this;
      relations = this.relations.filter(function(re) {
        return re.type === "parent-sub" && re.sub === _this;
      });
      return relations.length === 0;
    };

    OntologyClass.prototype.sub_classes = function() {
      var relations, subs,
        _this = this;
      relations = this.relations.filter(function(re) {
        return re.type === "parent-sub" && re.parent === _this;
      });
      subs = relations.map(function(re) {
        return re.sub;
      });
      return subs;
    };

    OntologyClass.prototype.parent_classes = function() {
      var parents, relations,
        _this = this;
      relations = this.relations.filter(function(re) {
        return re.type === "parent-sub" && re.sub === _this;
      });
      parents = relations.map(function(re) {
        return re.parent;
      });
      return parents;
    };

    return OntologyClass;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyClass: OntologyClass
  });

  OntologyDataProperty = (function(_super) {

    __extends(OntologyDataProperty, _super);

    function OntologyDataProperty(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.characteristics = [];
      this.relations = [];
    }

    OntologyDataProperty.prototype.add_relation = function(relation) {
      return this.relations.push(relation);
    };

    OntologyDataProperty.prototype.add_characteristic = function(characteristic) {
      return this.characteristics.push(characteristic);
    };

    return OntologyDataProperty;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyDataProperty: OntologyDataProperty
  });

  OntologyDataType = (function(_super) {

    __extends(OntologyDataType, _super);

    function OntologyDataType(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.relations = [];
    }

    OntologyDataType.prototype.add_relation = function(relation) {
      return this.relations.push(relation);
    };

    return OntologyDataType;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyDataType: OntologyDataType
  });

  OntologyIndividual = (function(_super) {

    __extends(OntologyIndividual, _super);

    function OntologyIndividual(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.data_property_values = [];
      this.relations = [];
    }

    OntologyIndividual.prototype.add_relation = function(relation) {
      return this.relations.push(relation);
    };

    OntologyIndividual.prototype.add_data_property_value = function(data_property_value) {
      return this.data_property_values.push(data_property_value);
    };

    OntologyIndividual.prototype.is_top = function() {
      var relations;
      relations = this.relations.filter(function(re) {
        return re.type === "class-individual";
      });
      return relations.length === 0;
    };

    return OntologyIndividual;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyIndividual: OntologyIndividual
  });

  OntologyObjectProperty = (function(_super) {

    __extends(OntologyObjectProperty, _super);

    function OntologyObjectProperty(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.characteristics = [];
      this.relations = [];
    }

    OntologyObjectProperty.prototype.add_relation = function(relation) {
      return this.relations.push(relation);
    };

    OntologyObjectProperty.prototype.add_characteristic = function(characteristic) {
      return this.characteristics.push(characteristic);
    };

    return OntologyObjectProperty;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyObjectProperty: OntologyObjectProperty
  });

  AnnotationParser = (function() {

    AnnotationParser.DEFAULT_IRIS = ["owl:backwardCompatibleWith", "rdfs:comment", "owl:deprecated", "owl:incompatibleWith", "rdfs:isDefinedBy", "rdfs:label", "owl:priorVersion", "rdfs:seeAlso", "owl:versionInfo"];

    function AnnotationParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.annotations = [];
    }

    AnnotationParser.prototype.build_model = function() {
      this._parse_model();
      return this._parse_sub_and_parent_model();
    };

    AnnotationParser.prototype.build_related = function() {
      this._parse_related_domain_class();
      this._parse_related_range_class();
      return this._parse_related_annotation_value();
    };

    AnnotationParser.prototype.get_model_by_iri = function(iri) {
      var an, ans,
        _this = this;
      ans = this.annotations.filter(function(an) {
        return an.iri === iri;
      });
      an = ans[0];
      if (!!an) {
        return an;
      }
      return this._get_default_mode_by_iri(iri);
    };

    AnnotationParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = AnnotationParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    AnnotationParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration AnnotationProperty').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    AnnotationParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubAnnotationPropertyOf').each(function(i, dom) {
        var as, ele, parent_iri, sub_iri;
        ele = jQuery(dom);
        as = ele.find('AnnotationProperty');
        sub_iri = jQuery(as[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(as[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(as[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(as[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    AnnotationParser.prototype._parse_related_domain_class = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('AnnotationPropertyDomain').each(function(i, dom) {
        var annotation_iri, class_iri, ele;
        ele = jQuery(dom);
        annotation_iri = ele.find('AnnotationProperty').attr('IRI');
        if (!annotation_iri) {
          annotation_iri = ele.find('AnnotationProperty').attr('abbreviatedIRI');
        }
        class_iri = ele.find('IRI').html();
        if (!class_iri) {
          class_iri = ele.find('abbreviatedIRI').html();
        }
        return _this._build_related_domain_class(annotation_iri, class_iri);
      });
    };

    AnnotationParser.prototype._parse_related_range_class = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('AnnotationPropertyRange').each(function(i, dom) {
        var annotation_iri, class_iri, ele;
        ele = jQuery(dom);
        annotation_iri = ele.find('AnnotationProperty').attr('IRI');
        if (!annotation_iri) {
          annotation_iri = ele.find('AnnotationProperty').attr('abbreviatedIRI');
        }
        class_iri = ele.find('IRI').html();
        if (!class_iri) {
          class_iri = ele.find('abbreviatedIRI').html();
        }
        return _this._build_related_range_class(annotation_iri, class_iri);
      });
    };

    AnnotationParser.prototype._parse_related_annotation_value = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('AnnotationAssertion').each(function(i, dom) {
        var annotation_iri, data_type_iri, ele, model_iri, value;
        ele = jQuery(dom);
        annotation_iri = ele.find('AnnotationProperty').attr('IRI');
        if (!annotation_iri) {
          annotation_iri = ele.find('AnnotationProperty').attr('abbreviatedIRI');
        }
        model_iri = ele.find('IRI').html();
        if (!model_iri) {
          model_iri = ele.find('abbreviatedIRI').html();
        }
        data_type_iri = ele.find('Literal').attr('datatypeIRI');
        value = ele.find('Literal').html();
        return _this._build_related_annotation_value(model_iri, annotation_iri, data_type_iri, value);
      });
    };

    AnnotationParser.prototype._build_model = function(iri) {
      var annotation;
      annotation = new OntologyAnnotation(iri);
      this.annotations.push(annotation);
      return annotation;
    };

    AnnotationParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, relation, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      relation = new OntologyAnnotationParentSubRelation(parent, sub);
      parent.add_relation(relation);
      return sub.add_relation(relation);
    };

    AnnotationParser.prototype._build_related_domain_class = function(annotation_iri, class_iri) {
      var annotation, clazz, relation;
      annotation = this.get_model_by_iri(annotation_iri);
      clazz = this.owl_parser.class_parser.get_model_by_iri(class_iri);
      relation = new OntologyAnnotationDomainClassRelation(clazz, annotation);
      annotation.add_relation(relation);
      return clazz.add_relation(relation);
    };

    AnnotationParser.prototype._build_related_range_class = function(annotation_iri, class_iri) {
      var annotation, clazz, relation;
      annotation = this.get_model_by_iri(annotation_iri);
      clazz = this.owl_parser.class_parser.get_model_by_iri(class_iri);
      relation = new OntologyAnnotationRangeClassRelation(clazz, annotation);
      annotation.add_relation(relation);
      return clazz.add_relation(relation);
    };

    AnnotationParser.prototype._build_related_annotation_value = function(model_iri, annotation_iri, data_type_iri, value) {
      var annotation, data_type, model, relation;
      model = this.owl_parser.get_model_by_iri(model_iri);
      annotation = this.get_model_by_iri(annotation_iri);
      data_type = this.owl_parser.data_type_parser.get_model_by_iri(data_type_iri);
      relation = new OntologyAnnotationValueRelation(model, annotation, data_type, value);
      return model.add_relation(relation);
    };

    return AnnotationParser;

  })();

  jQuery.extend(window, {
    AnnotationParser: AnnotationParser
  });

  ClassParser = (function() {

    ClassParser.DEFAULT_IRIS = ['owl:Thing'];

    function ClassParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.classes = [];
    }

    ClassParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_sub_and_parent_model();
      this._parse_equivalence_model();
      return this._parse_disjoint_model();
    };

    ClassParser.prototype.build_related = function() {
      this._parse_related_individual();
      this._parse_related_object_property();
      return this._parse_related_data_property();
    };

    ClassParser.prototype.get_model_by_iri = function(iri) {
      var classes, clazz,
        _this = this;
      classes = this.classes.filter(function(clazz) {
        return clazz.iri === iri;
      });
      clazz = classes[0];
      if (!!clazz) {
        return clazz;
      }
      return this._get_default_mode_by_iri(iri);
    };

    ClassParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = ClassParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    ClassParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration Class').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    ClassParser.prototype._build_model = function(iri) {
      var clazz;
      clazz = new OntologyClass(iri);
      this.classes.push(clazz);
      return clazz;
    };

    ClassParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubClassOf').each(function(i, dom) {
        var class_eles, ele, parent_iri, sub_iri;
        ele = jQuery(dom);
        class_eles = ele.find('Class');
        sub_iri = jQuery(class_eles[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(class_eles[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(class_eles[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(class_eles[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    ClassParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, relation, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      relation = new OntologyClassParentSubRelation(parent, sub);
      parent.add_relation(relation);
      return sub.add_relation(relation);
    };

    ClassParser.prototype._parse_equivalence_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('EquivalentClasses').each(function(i, dom) {
        var class_eles, ele, iri, other_iri;
        ele = jQuery(dom);
        class_eles = ele.find('Class');
        iri = jQuery(class_eles[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(class_eles[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(class_eles[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(class_eles[1]).attr('abbreviatedIRI');
        }
        return _this._build_equivalence_model(iri, other_iri);
      });
    };

    ClassParser.prototype._build_equivalence_model = function(iri, other_iri) {
      var clazz, other_class, relation;
      clazz = this.get_model_by_iri(iri);
      other_class = this.get_model_by_iri(other_iri);
      relation = new OntologyClassEquivalentRelation([clazz, other_class]);
      clazz.add_relation(relation);
      return other_class.add_relation(relation);
    };

    ClassParser.prototype._parse_disjoint_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DisjointClasses').each(function(i, dom) {
        var class_eles, ele, iri, other_iri;
        ele = jQuery(dom);
        class_eles = ele.find('Class');
        iri = jQuery(class_eles[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(class_eles[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(class_eles[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(class_eles[1]).attr('abbreviatedIRI');
        }
        return _this._build_disjoint_model(iri, other_iri);
      });
    };

    ClassParser.prototype._build_disjoint_model = function(iri, other_iri) {
      var clazz, other_class, relation;
      clazz = this.get_model_by_iri(iri);
      other_class = this.get_model_by_iri(other_iri);
      relation = new OntologyClassDisjointRelation([clazz, other_class]);
      clazz.add_relation(relation);
      return other_class.add_relation(relation);
    };

    ClassParser.prototype._parse_related_individual = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ClassAssertion').each(function(i, dom) {
        var class_iri, ele, individual_iri;
        ele = jQuery(dom);
        class_iri = ele.find('Class').attr('IRI');
        if (!class_iri) {
          class_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        individual_iri = ele.find('NamedIndividual').attr('IRI');
        return _this._build_related_individual(class_iri, individual_iri);
      });
    };

    ClassParser.prototype._build_related_individual = function(class_iri, individual_iri) {
      var clazz, individual, relation;
      clazz = this.get_model_by_iri(class_iri);
      individual = this.owl_parser.individual_parser.get_model_by_iri(individual_iri);
      relation = new OntologyClassIndividualRelation(clazz, individual);
      clazz.add_relation(relation);
      return individual.add_relation(relation);
    };

    ClassParser.prototype._parse_related_object_property = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('HasKey').each(function(i, dom) {
        var class_iri, ele, op_iri;
        ele = jQuery(dom);
        class_iri = ele.find('Class').attr('IRI');
        if (!class_iri) {
          class_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        if (!!op_iri) {
          return _this._build_related_object_property(class_iri, op_iri);
        }
      });
    };

    ClassParser.prototype._build_related_object_property = function(class_iri, op_iri) {
      var clazz, op;
      clazz = this.get_model_by_iri(class_iri);
      op = this.owl_parser.object_property_parser.get_model_by_iri(op_iri);
      return clazz.add_object_property(op);
    };

    ClassParser.prototype._parse_related_data_property = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('HasKey').each(function(i, dom) {
        var class_iri, dp_iri, ele;
        ele = jQuery(dom);
        class_iri = ele.find('Class').attr('IRI');
        if (!class_iri) {
          class_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        dp_iri = ele.find('DataProperty').attr('IRI');
        if (!dp_iri) {
          dp_iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        if (!!dp_iri) {
          return _this._build_related_data_property(class_iri, dp_iri);
        }
      });
    };

    ClassParser.prototype._build_related_data_property = function(class_iri, dp_iri) {
      var clazz, op;
      clazz = this.get_model_by_iri(class_iri);
      op = this.owl_parser.data_property_parser.get_model_by_iri(dp_iri);
      return clazz.add_data_property(op);
    };

    return ClassParser;

  })();

  jQuery.extend(window, {
    ClassParser: ClassParser
  });

  DataPropertyParser = (function() {

    DataPropertyParser.characteristic_data = {
      'FunctionalDataProperty': OntologyCharacteristic.FUNCTIONAL
    };

    DataPropertyParser.DEFAULT_IRIS = ['owl:topDataProperty'];

    function DataPropertyParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.data_properties = [];
    }

    DataPropertyParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_sub_and_parent_model();
      this._parse_equivalence_model();
      return this._parse_disjoint_model();
    };

    DataPropertyParser.prototype.build_related = function() {
      this._parse_related_domain_class();
      this._parse_related_range_data_type();
      return this._parse_related_characteristic();
    };

    DataPropertyParser.prototype.get_model_by_iri = function(iri) {
      var dp, dps,
        _this = this;
      dps = this.data_properties.filter(function(dp) {
        return dp.iri === iri;
      });
      dp = dps[0];
      if (!!dp) {
        return dp;
      }
      return this._get_default_mode_by_iri(iri);
    };

    DataPropertyParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = DataPropertyParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    DataPropertyParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration DataProperty').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    DataPropertyParser.prototype._build_model = function(iri) {
      var data_property;
      data_property = new OntologyDataProperty(iri);
      this.data_properties.push(data_property);
      return data_property;
    };

    DataPropertyParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubDataPropertyOf').each(function(i, dom) {
        var dps, ele, parent_iri, sub_iri;
        ele = jQuery(dom);
        dps = ele.find('DataProperty');
        sub_iri = jQuery(dps[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(dps[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(dps[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(dps[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    DataPropertyParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, relation, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      relation = new OntologyDataPropertyParentSubRelation(parent, sub);
      parent.add_relation(relation);
      return sub.add_relation(relation);
    };

    DataPropertyParser.prototype._parse_equivalence_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('EquivalentDataProperties').each(function(i, dom) {
        var dps, ele, iri, other_iri;
        ele = jQuery(dom);
        dps = ele.find('DataProperty');
        iri = jQuery(dps[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(dps[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(dps[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(dps[1]).attr('abbreviatedIRI');
        }
        return _this._build_equivalence_model(iri, other_iri);
      });
    };

    DataPropertyParser.prototype._build_equivalence_model = function(iri, other_iri) {
      var dp, other_dp, relation;
      dp = this.get_model_by_iri(iri);
      other_dp = this.get_model_by_iri(other_iri);
      relation = new OntologyDataPropertyEquivalentRelation([dp, other_dp]);
      dp.add_relation(relation);
      return other_dp.add_relation(relation);
    };

    DataPropertyParser.prototype._parse_disjoint_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DisjointDataProperties').each(function(i, dom) {
        var dps, ele, iri, other_iri;
        ele = jQuery(dom);
        dps = ele.find('DataProperty');
        iri = jQuery(dps[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(dps[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(dps[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(dps[1]).attr('abbreviatedIRI');
        }
        return _this._build_disjoint_model(iri, other_iri);
      });
    };

    DataPropertyParser.prototype._build_disjoint_model = function(iri, other_iri) {
      var dp, other_dp, relation;
      dp = this.get_model_by_iri(iri);
      other_dp = this.get_model_by_iri(other_iri);
      relation = new OntologyDataPropertyDisjointRelation([dp, other_dp]);
      dp.add_relation(relation);
      return other_dp.add_relation(relation);
    };

    DataPropertyParser.prototype._parse_related_domain_class = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DataPropertyDomain').each(function(i, dom) {
        var class_iri, ele, iri;
        ele = jQuery(dom);
        iri = ele.find('DataProperty').attr('IRI');
        if (!iri) {
          iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        class_iri = ele.find('Class').attr('IRI');
        if (!class_iri) {
          class_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        return _this._build_related_domain_class(iri, class_iri);
      });
    };

    DataPropertyParser.prototype._build_related_domain_class = function(iri, class_iri) {
      var clazz, dp, relation;
      dp = this.get_model_by_iri(iri);
      clazz = this.owl_parser.class_parser.get_model_by_iri(class_iri);
      relation = new OntologyDataPropertyDomainClassRelation(dp, clazz);
      dp.add_relation(relation);
      return clazz.add_relation(relation);
    };

    DataPropertyParser.prototype._parse_related_range_data_type = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DataPropertyRange').each(function(i, dom) {
        var dp_iri, dt_iri, ele;
        ele = jQuery(dom);
        dp_iri = ele.find('DataProperty').attr('IRI');
        if (!dp_iri) {
          dp_iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        dt_iri = ele.find('Datatype').attr('IRI');
        if (!dt_iri) {
          dt_iri = ele.find('Datatype').attr('abbreviatedIRI');
        }
        return _this._build_related_range_data_type(dp_iri, dt_iri);
      });
    };

    DataPropertyParser.prototype._build_related_range_data_type = function(dp_iri, dt_iri) {
      var dp, dt, relation;
      dp = this.get_model_by_iri(dp_iri);
      dt = this.owl_parser.data_type_parser.get_model_by_iri(dt_iri);
      relation = new OntologyDataPropertyRangeDataTypeRelation(dp, dt);
      dp.add_relation(relation);
      return dt.add_relation(relation);
    };

    DataPropertyParser.prototype._parse_related_characteristic = function() {
      var name, value, _ref, _results,
        _this = this;
      _ref = DataPropertyParser.characteristic_data;
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        _results.push(this.owl_parser.owl_doc.find(name).each(function(i, dom) {
          var iri;
          iri = jQuery(dom).find('DataProperty').attr('IRI');
          if (!iri) {
            iri = jQuery(dom).find('DataProperty').attr('abbreviatedIRI');
          }
          return _this._build_related_characteristic(iri, value);
        }));
      }
      return _results;
    };

    DataPropertyParser.prototype._build_related_characteristic = function(iri, characteristic) {
      var dp;
      dp = this.get_model_by_iri(iri);
      return dp.add_characteristic(characteristic);
    };

    return DataPropertyParser;

  })();

  jQuery.extend(window, {
    DataPropertyParser: DataPropertyParser
  });

  DataTypeParser = (function() {

    DataTypeParser.DEFAULT_IRIS = ["rdf:PlainLiteral", "xsd:anyURI", "xsd:base64Binary", "xsd:boolean", "xsd:byte", "xsd:dateTime", "xsd:dateTimeStamp", "xsd:decimal", "xsd:double", "xsd:float", "xsd:hexBinary", "xsd:int", "xsd:integer", "xsd:language", "xsd:Literal", "xsd:long", "xsd:Name", "xsd:NCName", "xsd:negativeInteger", "xsd:NMTOKEN", "xsd:nonNegativeInteger", "xsd:nonPositiveInteger", "xsd:normalizedString", "xsd:positiveInteger", "xsd:rational", "xsd:real", "xsd:short", "xsd:string", "xsd:token", "xsd:unsignedByte", "xsd:unsignedInt", "xsd:unsignedLong", "xsd:unsignedShort", "xsd:XMLLiteral"];

    function DataTypeParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.data_types = [];
    }

    DataTypeParser.prototype.build_model = function() {
      return this._parse_model();
    };

    DataTypeParser.prototype.build_related = function() {};

    DataTypeParser.prototype.get_model_by_iri = function(bug_iri) {
      var dt, dts, iri,
        _this = this;
      iri = this._get_fix_bug_iri(bug_iri);
      dts = this.data_types.filter(function(dt) {
        return dt.iri === iri;
      });
      dt = dts[0];
      if (!!dt) {
        return dt;
      }
      return this._get_default_mode_by_iri(iri);
    };

    DataTypeParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = DataTypeParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    DataTypeParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration Datatype').each(function(i, dom) {
        var iri;
        iri = jQuery(dom).attr('IRI');
        return _this._build_model(iri);
      });
    };

    DataTypeParser.prototype._build_model = function(iri) {
      var dt;
      dt = new OntologyDataType(iri);
      this.data_types.push(dt);
      return dt;
    };

    DataTypeParser.prototype._get_fix_bug_iri = function(iri) {
      var reg;
      if (!iri) {
        return null;
      }
      reg = iri.match(/&(\S+);(\S+)/);
      if (!!reg) {
        return "" + reg[1] + ":" + reg[2];
      }
      reg = iri.match(/\S+(#\S+)/);
      if (!!reg) {
        return reg[1];
      }
      return iri;
    };

    return DataTypeParser;

  })();

  jQuery.extend(window, {
    DataTypeParser: DataTypeParser
  });

  IndividualParser = (function() {

    function IndividualParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.individuals = [];
    }

    IndividualParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_same_model();
      return this._parse_different_model();
    };

    IndividualParser.prototype.build_related = function() {
      this._parse_related_object_property_value();
      return this._parse_related_data_property_value();
    };

    IndividualParser.prototype.get_model_by_iri = function(iri) {
      var individuals,
        _this = this;
      individuals = this.individuals.filter(function(indi) {
        return indi.iri === iri;
      });
      return individuals[0];
    };

    IndividualParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration NamedIndividual').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    IndividualParser.prototype._build_model = function(iri) {
      var indi;
      indi = new OntologyIndividual(iri);
      if (!this.individuals) {
        this.individuals = [];
      }
      return this.individuals.push(indi);
    };

    IndividualParser.prototype._parse_same_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SameIndividual').each(function(i, dom) {
        var ele, indis, iri, other_iri;
        ele = jQuery(dom);
        indis = ele.find('NamedIndividual');
        iri = jQuery(indis[0]).attr('IRI');
        other_iri = jQuery(indis[1]).attr('IRI');
        return _this._build_same_model(iri, other_iri);
      });
    };

    IndividualParser.prototype._build_same_model = function(iri, other_iri) {
      var indi, other_indi, relation;
      indi = this.get_model_by_iri(iri);
      other_indi = this.get_model_by_iri(other_iri);
      relation = new OntologyIndividualSameRelation([indi, other_indi]);
      indi.add_relation(relation);
      return other_indi.add_relation(relation);
    };

    IndividualParser.prototype._parse_different_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DifferentIndividuals').each(function(i, dom) {
        var ele, indis, iri, other_iri;
        ele = jQuery(dom);
        indis = ele.find('NamedIndividual');
        iri = jQuery(indis[0]).attr('IRI');
        other_iri = jQuery(indis[1]).attr('IRI');
        return _this._build_different_model(iri, other_iri);
      });
    };

    IndividualParser.prototype._build_different_model = function(iri, other_iri) {
      var indi, other_indi, relation;
      indi = this.get_model_by_iri(iri);
      other_indi = this.get_model_by_iri(other_iri);
      relation = new OntologyIndividualDifferentRelation([indi, other_indi]);
      indi.add_relation(relation);
      return other_indi.add_relation(relation);
    };

    IndividualParser.prototype._parse_related_object_property_value = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ObjectPropertyAssertion').each(function(i, dom) {
        var ele, indi_iri, indis, op_iri, value_indi_iri;
        ele = jQuery(dom);
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        indis = ele.find('NamedIndividual');
        indi_iri = jQuery(indis[0]).attr('IRI');
        value_indi_iri = jQuery(indis[1]).attr('IRI');
        return _this._build_related_object_property_value(indi_iri, op_iri, value_indi_iri);
      });
    };

    IndividualParser.prototype._build_related_object_property_value = function(indi_iri, op_iri, value_indi_iri) {
      var indi, op, relation, value;
      indi = this.get_model_by_iri(indi_iri);
      value = this.get_model_by_iri(value_indi_iri);
      op = this.owl_parser.object_property_parser.get_model_by_iri(op_iri);
      relation = new OntologyIndividualObjectPropertyValueRelation(indi, op, value);
      return indi.add_relation(relation);
    };

    IndividualParser.prototype._parse_related_data_property_value = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DataPropertyAssertion').each(function(i, dom) {
        var data_type_iri, dp_iri, ele, indi_iri, value;
        ele = jQuery(dom);
        dp_iri = ele.find('DataProperty').attr('IRI');
        if (!dp_iri) {
          dp_iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        indi_iri = ele.find('NamedIndividual').attr('IRI');
        data_type_iri = ele.find('Literal').attr('datatypeIRI');
        value = ele.find('Literal').html();
        return _this._build_related_data_property_value(indi_iri, dp_iri, data_type_iri, value);
      });
    };

    IndividualParser.prototype._build_related_data_property_value = function(indi_iri, dp_iri, data_type_iri, value) {
      var data_type, dp, indi, relation;
      indi = this.get_model_by_iri(indi_iri);
      dp = this.owl_parser.data_property_parser.get_model_by_iri(dp_iri);
      data_type = this.owl_parser.data_type_parser.get_model_by_iri(data_type_iri);
      relation = new OntologyIndividualDataPropertyValueRelation(indi, dp, data_type, value);
      return indi.add_relation(relation);
    };

    return IndividualParser;

  })();

  jQuery.extend(window, {
    IndividualParser: IndividualParser
  });

  ObjectPropertyParser = (function() {

    ObjectPropertyParser.characteristic_data = {
      'FunctionalObjectProperty': OntologyCharacteristic.FUNCTIONAL,
      'InverseFunctionalObjectProperty': OntologyCharacteristic.INVERSE_FUNCTIONAL,
      'SymmetricObjectProperty': OntologyCharacteristic.SYMMETRIC,
      'AsymmetricObjectProperty': OntologyCharacteristic.ASYMMETRIC,
      'TransitiveObjectProperty': OntologyCharacteristic.TRANSITIVE,
      'ReflexiveObjectProperty': OntologyCharacteristic.REFLEXIVE,
      'IrreflexiveObjectProperty': OntologyCharacteristic.IRREFLEXIVE
    };

    ObjectPropertyParser.DEFAULT_IRIS = ['owl:topObjectProperty'];

    function ObjectPropertyParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.object_properties = [];
    }

    ObjectPropertyParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_sub_and_parent_model();
      this._parse_equivalence_model();
      this._parse_inverse_model();
      return this._parse_disjoint_model();
    };

    ObjectPropertyParser.prototype.build_related = function() {
      this._parse_related_domain_class();
      this._parse_realted_range_class();
      return this._parse_related_characteristic();
    };

    ObjectPropertyParser.prototype.get_model_by_iri = function(iri) {
      var an, ans,
        _this = this;
      ans = this.object_properties.filter(function(an) {
        return an.iri === iri;
      });
      an = ans[0];
      if (!!an) {
        return an;
      }
      return this._get_default_mode_by_iri(iri);
    };

    ObjectPropertyParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = ObjectPropertyParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    ObjectPropertyParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration ObjectProperty').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    ObjectPropertyParser.prototype._build_model = function(iri) {
      var odp;
      odp = new OntologyObjectProperty(iri);
      this.object_properties.push(odp);
      return odp;
    };

    ObjectPropertyParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubObjectPropertyOf').each(function(i, dom) {
        var ele, ops, parent_iri, sub_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        sub_iri = jQuery(ops[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(ops[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    ObjectPropertyParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, relation, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      relation = new OntologyObjectPropertyParentSubRelation(parent, sub);
      parent.add_relation(relation);
      return sub.add_relation(relation);
    };

    ObjectPropertyParser.prototype._parse_equivalence_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('EquivalentObjectProperties').each(function(i, dom) {
        var ele, iri, ops, other_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        iri = jQuery(ops[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(ops[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_equivalence_model(iri, other_iri);
      });
    };

    ObjectPropertyParser.prototype._build_equivalence_model = function(iri, other_iri) {
      var op, other_op, relation;
      op = this.get_model_by_iri(iri);
      other_op = this.get_model_by_iri(other_iri);
      relation = new OntologyObjectPropertyEquivalentRelation([op, other_op]);
      op.add_relation(relation);
      return other_op.add_relation(relation);
    };

    ObjectPropertyParser.prototype._parse_inverse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('InverseObjectProperties').each(function(i, dom) {
        var ele, iri, ops, other_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        iri = jQuery(ops[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(ops[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_inverse_model(iri, other_iri);
      });
    };

    ObjectPropertyParser.prototype._build_inverse_model = function(iri, other_iri) {
      var op, other_op, relation;
      op = this.get_model_by_iri(iri);
      other_op = this.get_model_by_iri(other_iri);
      relation = new OntologyObjectPropertyInverseRelation([op, other_op]);
      op.add_relation(relation);
      return other_op.add_relation(relation);
    };

    ObjectPropertyParser.prototype._parse_disjoint_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DisjointObjectProperties').each(function(i, dom) {
        var ele, iri, ops, other_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        iri = jQuery(ops[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(ops[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_disjoint_model(iri, other_iri);
      });
    };

    ObjectPropertyParser.prototype._build_disjoint_model = function(iri, other_iri) {
      var op, other_op, relation;
      op = this.get_model_by_iri(iri);
      other_op = this.get_model_by_iri(other_iri);
      relation = new OntologyObjectPropertyDisjointRelation([op, other_op]);
      op.add_relation(relation);
      return other_op.add_relation(relation);
    };

    ObjectPropertyParser.prototype._parse_related_domain_class = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ObjectPropertyDomain').each(function(i, dom) {
        var class_iri, ele, op_iri;
        ele = jQuery(dom);
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        class_iri = ele.find('Class').attr('IRI');
        if (!class_iri) {
          class_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        return _this._build_related_domain_class(op_iri, class_iri);
      });
    };

    ObjectPropertyParser.prototype._build_related_domain_class = function(op_iri, class_iri) {
      var clazz, op, relation;
      op = this.get_model_by_iri(op_iri);
      clazz = this.owl_parser.class_parser.get_model_by_iri(class_iri);
      relation = new OntologyObjectPropertyDomainClassRelation(op, clazz);
      op.add_relation(relation);
      return clazz.add_relation(relation);
    };

    ObjectPropertyParser.prototype._parse_realted_range_class = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ObjectPropertyRange').each(function(i, dom) {
        var class_iri, ele, op_iri;
        ele = jQuery(dom);
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        class_iri = ele.find('Class').attr('IRI');
        if (!class_iri) {
          class_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        return _this._build_realted_range_class(op_iri, class_iri);
      });
    };

    ObjectPropertyParser.prototype._build_realted_range_class = function(op_iri, class_iri) {
      var clazz, op, relation;
      op = this.get_model_by_iri(op_iri);
      clazz = this.owl_parser.class_parser.get_model_by_iri(class_iri);
      relation = new OntologyObjectPropertyRangeClassRelation(op, clazz);
      op.add_relation(relation);
      return clazz.add_relation(relation);
    };

    ObjectPropertyParser.prototype._parse_related_characteristic = function() {
      var name, value, _ref, _results,
        _this = this;
      _ref = ObjectPropertyParser.characteristic_data;
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        _results.push(this.owl_parser.owl_doc.find(name).each(function(i, dom) {
          var iri;
          iri = jQuery(dom).find('ObjectProperty').attr('IRI');
          if (!iri) {
            iri = jQuery(dom).find('ObjectProperty').attr('abbreviatedIRI');
          }
          return _this._build_related_characteristic(iri, value);
        }));
      }
      return _results;
    };

    ObjectPropertyParser.prototype._build_related_characteristic = function(iri, characteristic) {
      var op;
      op = this.get_model_by_iri(iri);
      return op.add_characteristic(characteristic);
    };

    return ObjectPropertyParser;

  })();

  jQuery.extend(window, {
    ObjectPropertyParser: ObjectPropertyParser
  });

  OwlParser = (function() {

    function OwlParser(owl_text) {
      this.owl_text = owl_text;
      this.owl_doc = jQuery(this.owl_text);
      this.annotation_parser = new AnnotationParser(this);
      this.class_parser = new ClassParser(this);
      this.individual_parser = new IndividualParser(this);
      this.object_property_parser = new ObjectPropertyParser(this);
      this.data_property_parser = new DataPropertyParser(this);
      this.data_type_parser = new DataTypeParser(this);
      this.parsers = [this.annotation_parser, this.class_parser, this.individual_parser, this.object_property_parser, this.data_property_parser, this.data_type_parser];
    }

    OwlParser.prototype.build = function() {
      this._build_model();
      this._build_related();
      return new Ontology(this);
    };

    OwlParser.prototype.get_model_by_iri = function(iri) {
      var model, parser, _i, _len, _ref;
      _ref = this.parsers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parser = _ref[_i];
        model = parser.get_model_by_iri(iri);
        if (!!model) {
          return model;
        }
      }
      return null;
    };

    OwlParser.prototype._build_model = function() {
      this.annotation_parser.build_model();
      this.class_parser.build_model();
      this.individual_parser.build_model();
      this.object_property_parser.build_model();
      this.data_property_parser.build_model();
      return this.data_type_parser.build_model();
    };

    OwlParser.prototype._build_related = function() {
      this.annotation_parser.build_related();
      this.class_parser.build_related();
      this.individual_parser.build_related();
      this.object_property_parser.build_related();
      this.data_property_parser.build_related();
      return this.data_type_parser.build_related();
    };

    return OwlParser;

  })();

  jQuery.extend(window, {
    OwlParser: OwlParser
  });

}).call(this);
