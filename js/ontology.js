// Generated by CoffeeScript 1.6.1
(function() {
  var AnnotationParser, DataPropertyParser, DataTypeParser, IndividualParser, ObjectPropertyParser, Ontology, OntologyAnnotation, OntologyAnnotationValue, OntologyBase, OntologyCharacteristic, OntologyDataProperty, OntologyDataPropertyValue, OntologyDataType, OntologyDataTypeValue, OntologyIndividual, OntologyObjectProperty, OntologyObjectPropertyValue, OntologyThing, OwlParser, ThingParser,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OntologyBase = (function() {

    function OntologyBase() {}

    OntologyBase.prototype.get_name = function(iri) {
      var position, sections;
      position = iri.indexOf('#');
      if (position === 0) {
        return iri.substring(1);
      }
      sections = iri.split(':');
      return sections[1];
    };

    return OntologyBase;

  })();

  jQuery.extend(window, {
    OntologyBase: OntologyBase
  });

  Ontology = (function() {

    function Ontology(owl_parser) {
      this.annotations = owl_parser.annotation_parser.annotations;
      this.things = owl_parser.thing_parser.things;
      this.individuals = owl_parser.individual_parser.individuals;
      this.object_properties = owl_parser.object_property_parser.object_properties;
      this.data_properties = owl_parser.data_property_parser.data_properties;
      this.data_types = owl_parser.data_type_parser.data_types;
    }

    return Ontology;

  })();

  jQuery.extend(window, {
    Ontology: Ontology
  });

  OntologyAnnotation = (function(_super) {

    __extends(OntologyAnnotation, _super);

    function OntologyAnnotation(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.sub_annotations = [];
      this.parent_annotations = [];
      this.domain_things = [];
      this.range_things = [];
      this.annotation_values = [];
    }

    OntologyAnnotation.prototype.add_sub_annotation = function(annotation) {
      return this.sub_annotations.push(annotation);
    };

    OntologyAnnotation.prototype.add_parent_annotation = function(annotation) {
      return this.parent_annotations.push(annotation);
    };

    OntologyAnnotation.prototype.add_domain_thing = function(domain) {
      return this.domain_things.push(domain);
    };

    OntologyAnnotation.prototype.add_range_thing = function(range) {
      return this.range_things.push(range);
    };

    OntologyAnnotation.prototype.add_annotation_value = function(annotation_value) {
      return this.annotation_values.push(annotation_value);
    };

    return OntologyAnnotation;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyAnnotation: OntologyAnnotation
  });

  OntologyAnnotationValue = (function() {

    function OntologyAnnotationValue(annotation, data_type_value) {
      this.annotation = annotation;
      this.data_type_value = data_type_value;
    }

    return OntologyAnnotationValue;

  })();

  jQuery.extend(window, {
    OntologyAnnotationValue: OntologyAnnotationValue
  });

  OntologyCharacteristic = (function() {

    OntologyCharacteristic.FUNCTIONAL = new OntologyCharacteristic('FUNCTIONAL');

    OntologyCharacteristic.INVERSE_FUNCTIONAL = new OntologyCharacteristic('INVERSE_FUNCTIONAL');

    OntologyCharacteristic.SYMMETRIC = new OntologyCharacteristic('SYMMETRIC');

    OntologyCharacteristic.ASYMMETRIC = new OntologyCharacteristic('ASYMMETRIC');

    OntologyCharacteristic.TRANSITIVE = new OntologyCharacteristic('TRANSITIVE');

    OntologyCharacteristic.REFLEXIVE = new OntologyCharacteristic('REFLEXIVE');

    OntologyCharacteristic.IRREFLEXIVE = new OntologyCharacteristic('IRREFLEXIVE');

    function OntologyCharacteristic(name) {
      this.name = name;
    }

    return OntologyCharacteristic;

  })();

  jQuery.extend(window, {
    OntologyCharacteristic: OntologyCharacteristic
  });

  OntologyDataProperty = (function(_super) {

    __extends(OntologyDataProperty, _super);

    function OntologyDataProperty(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.sub_data_properties = [];
      this.parent_data_properties = [];
      this.equivalence_data_properties = [];
      this.disjoint_data_properties = [];
      this.characteristics = [];
      this.domain_things = [];
      this.range_data_types = [];
      this.annotation_values = [];
    }

    OntologyDataProperty.prototype.add_sub_data_property = function(property) {
      return this.sub_data_properties.push(property);
    };

    OntologyDataProperty.prototype.add_parent_data_property = function(property) {
      return this.parent_data_properties.push(property);
    };

    OntologyDataProperty.prototype.add_equivalence_data_property = function(property) {
      return this.equivalence_data_properties.push(property);
    };

    OntologyDataProperty.prototype.add_disjoint_data_property = function(property) {
      return this.disjoint_data_properties.push(property);
    };

    OntologyDataProperty.prototype.add_characteristic = function(characteristic) {
      return this.characteristics.push(characteristic);
    };

    OntologyDataProperty.prototype.add_domain_thing = function(domain) {
      return this.domain_things.push(domain);
    };

    OntologyDataProperty.prototype.add_range_data_type = function(data_type) {
      return this.range_data_types.push(data_type);
    };

    OntologyDataProperty.prototype.add_annotation_value = function(annotation_value) {
      return this.annotation_values.push(annotation_value);
    };

    return OntologyDataProperty;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyDataProperty: OntologyDataProperty
  });

  OntologyDataPropertyValue = (function() {

    function OntologyDataPropertyValue(data_property, data_type_value) {
      this.data_property = data_property;
      this.data_type_value = data_type_value;
    }

    return OntologyDataPropertyValue;

  })();

  jQuery.extend(window, {
    OntologyDataPropertyValue: OntologyDataPropertyValue
  });

  OntologyDataType = (function(_super) {

    __extends(OntologyDataType, _super);

    function OntologyDataType(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.annotation_values = [];
    }

    OntologyDataType.prototype.add_annotation_value = function(annotation_value) {
      return this.annotation_values.push(annotation_value);
    };

    return OntologyDataType;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyDataType: OntologyDataType
  });

  OntologyDataTypeValue = (function() {

    function OntologyDataTypeValue(data_type, value) {
      this.data_type = data_type;
      this.value = value;
    }

    return OntologyDataTypeValue;

  })();

  jQuery.extend(window, {
    OntologyDataTypeValue: OntologyDataTypeValue
  });

  OntologyIndividual = (function(_super) {

    __extends(OntologyIndividual, _super);

    function OntologyIndividual(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.same_individuals = [];
      this.different_individuals = [];
      this.things = [];
      this.annotation_values = [];
      this.object_property_values = [];
      this.data_property_values = [];
    }

    OntologyIndividual.prototype.add_same_individual = function(individual) {
      return this.same_individuals.push(individual);
    };

    OntologyIndividual.prototype.add_different_individual = function(individual) {
      return this.different_individuals.push(individual);
    };

    OntologyIndividual.prototype.add_thing = function(thing) {
      return this.things.push(thing);
    };

    OntologyIndividual.prototype.add_annotation_value = function(annotation_value) {
      return this.annotation_values.push(annotation_value);
    };

    OntologyIndividual.prototype.add_object_property_value = function(object_property_value) {
      return this.object_property_values.push(object_property_value);
    };

    OntologyIndividual.prototype.add_data_property_value = function(data_property_value) {
      return this.data_property_values.push(data_property_value);
    };

    return OntologyIndividual;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyIndividual: OntologyIndividual
  });

  OntologyObjectProperty = (function(_super) {

    __extends(OntologyObjectProperty, _super);

    function OntologyObjectProperty(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.sub_object_properties = [];
      this.parent_object_properties = [];
      this.equivalence_object_properties = [];
      this.inverse_object_properties = [];
      this.disjoint_object_properties = [];
      this.characteristics = [];
      this.domain_things = [];
      this.range_things = [];
      this.annotation_values = [];
    }

    OntologyObjectProperty.prototype.add_sub_object_property = function(property) {
      return this.sub_object_properties.push(property);
    };

    OntologyObjectProperty.prototype.add_parent_object_property = function(property) {
      return this.parent_object_properties.push(property);
    };

    OntologyObjectProperty.prototype.add_equivalence_object_property = function(property) {
      return this.equivalence_object_properties.push(property);
    };

    OntologyObjectProperty.prototype.add_inverse_object_property = function(property) {
      return this.inverse_object_properties.push(property);
    };

    OntologyObjectProperty.prototype.add_disjoint_object_property = function(property) {
      return this.disjoint_object_properties.push(property);
    };

    OntologyObjectProperty.prototype.add_characteristic = function(characteristic) {
      return this.characteristics.push(characteristic);
    };

    OntologyObjectProperty.prototype.add_domain_thing = function(domain) {
      return this.domain_things.push(domain);
    };

    OntologyObjectProperty.prototype.add_range_thing = function(range) {
      return this.range_things.push(range);
    };

    OntologyObjectProperty.prototype.add_annotation_value = function(annotation_value) {
      return this.annotation_values.push(annotation_value);
    };

    return OntologyObjectProperty;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyObjectProperty: OntologyObjectProperty
  });

  OntologyObjectPropertyValue = (function() {

    function OntologyObjectPropertyValue(object_property, individual) {
      this.object_property = object_property;
      this.individual = individual;
    }

    return OntologyObjectPropertyValue;

  })();

  jQuery.extend(window, {
    OntologyObjectPropertyValue: OntologyObjectPropertyValue
  });

  OntologyThing = (function(_super) {

    __extends(OntologyThing, _super);

    function OntologyThing(iri) {
      this.iri = iri;
      this.name = this.get_name(iri);
      this.sub_things = [];
      this.parent_things = [];
      this.equivalence_things = [];
      this.disjoint_things = [];
      this.individuals = [];
      this.annotation_values = [];
      this.object_properties = [];
      this.data_properties = [];
    }

    OntologyThing.prototype.add_sub_thing = function(thing) {
      return this.sub_things.push(thing);
    };

    OntologyThing.prototype.add_parent_thing = function(thing) {
      return this.parent_things.push(thing);
    };

    OntologyThing.prototype.add_equivalence_thing = function(thing) {
      return this.equivalence_things.push(thing);
    };

    OntologyThing.prototype.add_disjoint_thing = function(thing) {
      return this.disjoint_things.push(thing);
    };

    OntologyThing.prototype.add_individual = function(individual) {
      return this.individuals.push(individual);
    };

    OntologyThing.prototype.add_annotation_value = function(annotation_value) {
      return this.annotation_values.push(annotation_value);
    };

    OntologyThing.prototype.add_object_property = function(object_property) {
      return this.object_properties.push(object_property);
    };

    OntologyThing.prototype.add_data_property = function(data_property) {
      return this.data_properties.push(data_property);
    };

    return OntologyThing;

  })(OntologyBase);

  jQuery.extend(window, {
    OntologyThing: OntologyThing
  });

  AnnotationParser = (function() {

    AnnotationParser.DEFAULT_IRIS = ["owl:backwardCompatibleWith", "rdfs:comment", "owl:deprecated", "owl:incompatibleWith", "rdfs:isDefinedBy", "rdfs:label", "owl:priorVersion", "rdfs:seeAlso", "owl:versionInfo"];

    function AnnotationParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.annotations = [];
    }

    AnnotationParser.prototype.build_model = function() {
      this._parse_model();
      return this._parse_sub_and_parent_model();
    };

    AnnotationParser.prototype.build_related = function() {
      this._parse_related_domain_thing();
      this._parse_related_range_thing();
      return this._parse_related_annotation_value();
    };

    AnnotationParser.prototype.get_model_by_iri = function(iri) {
      var an, ans,
        _this = this;
      ans = this.annotations.filter(function(an) {
        return an.iri === iri;
      });
      an = ans[0];
      if (!!an) {
        return an;
      }
      return this._get_default_mode_by_iri(iri);
    };

    AnnotationParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = AnnotationParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    AnnotationParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration AnnotationProperty').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    AnnotationParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubAnnotationPropertyOf').each(function(i, dom) {
        var as, ele, parent_iri, sub_iri;
        ele = jQuery(dom);
        as = ele.find('AnnotationProperty');
        sub_iri = jQuery(as[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(as[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(as[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(as[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    AnnotationParser.prototype._parse_related_domain_thing = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('AnnotationPropertyDomain').each(function(i, dom) {
        var annotation_iri, ele, thing_iri;
        ele = jQuery(dom);
        annotation_iri = ele.find('AnnotationProperty').attr('IRI');
        if (!annotation_iri) {
          annotation_iri = ele.find('AnnotationProperty').attr('abbreviatedIRI');
        }
        thing_iri = ele.find('IRI').html();
        if (!thing_iri) {
          thing_iri = ele.find('abbreviatedIRI').html();
        }
        return _this._build_related_domain_thing(annotation_iri, thing_iri);
      });
    };

    AnnotationParser.prototype._parse_related_range_thing = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('AnnotationPropertyRange').each(function(i, dom) {
        var annotation_iri, ele, thing_iri;
        ele = jQuery(dom);
        annotation_iri = ele.find('AnnotationProperty').attr('IRI');
        if (!annotation_iri) {
          annotation_iri = ele.find('AnnotationProperty').attr('abbreviatedIRI');
        }
        thing_iri = ele.find('IRI').html();
        if (!thing_iri) {
          thing_iri = ele.find('abbreviatedIRI').html();
        }
        return _this._build_related_range_thing(annotation_iri, thing_iri);
      });
    };

    AnnotationParser.prototype._parse_related_annotation_value = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('AnnotationAssertion').each(function(i, dom) {
        var annotation_iri, data_type_iri, ele, model_iri, value;
        ele = jQuery(dom);
        annotation_iri = ele.find('AnnotationProperty').attr('IRI');
        if (!annotation_iri) {
          annotation_iri = ele.find('AnnotationProperty').attr('abbreviatedIRI');
        }
        model_iri = ele.find('IRI').html();
        if (!model_iri) {
          model_iri = ele.find('abbreviatedIRI').html();
        }
        data_type_iri = ele.find('Literal').attr('datatypeIRI');
        value = ele.find('Literal').html();
        return _this._build_related_annotation_value(model_iri, annotation_iri, data_type_iri, value);
      });
    };

    AnnotationParser.prototype._build_model = function(iri) {
      var annotation;
      annotation = new OntologyAnnotation(iri);
      this.annotations.push(annotation);
      return annotation;
    };

    AnnotationParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      parent.add_sub_annotation(sub);
      return sub.add_parent_annotation(parent);
    };

    AnnotationParser.prototype._build_related_domain_thing = function(annotation_iri, thing_iri) {
      var annotation, thing;
      annotation = this.get_model_by_iri(annotation_iri);
      thing = this.owl_parser.thing_parser.get_model_by_iri(thing_iri);
      return annotation.add_domain_thing(thing);
    };

    AnnotationParser.prototype._build_related_range_thing = function(annotation_iri, thing_iri) {
      var annotation, thing;
      annotation = this.get_model_by_iri(annotation_iri);
      thing = this.owl_parser.thing_parser.get_model_by_iri(thing_iri);
      return annotation.add_range_thing(thing);
    };

    AnnotationParser.prototype._build_related_annotation_value = function(model_iri, annotation_iri, data_type_iri, value) {
      var annotation, av, data_type, dtv, model;
      model = this.owl_parser.get_model_by_iri(model_iri);
      annotation = this.get_model_by_iri(annotation_iri);
      data_type = this.owl_parser.data_type_parser.get_model_by_iri(data_type_iri);
      dtv = new OntologyDataTypeValue(data_type, value);
      av = new OntologyAnnotationValue(annotation, dtv);
      return model.add_annotation_value(av);
    };

    return AnnotationParser;

  })();

  jQuery.extend(window, {
    AnnotationParser: AnnotationParser
  });

  DataPropertyParser = (function() {

    DataPropertyParser.characteristic_data = {
      'FunctionalDataProperty': OntologyCharacteristic.FUNCTIONAL
    };

    DataPropertyParser.DEFAULT_IRIS = ['owl:topDataProperty'];

    function DataPropertyParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.data_properties = [];
    }

    DataPropertyParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_sub_and_parent_model();
      this._parse_equivalence_model();
      return this._parse_disjoint_model();
    };

    DataPropertyParser.prototype.build_related = function() {
      this._parse_related_domain_thing();
      this._parse_related_range_data_type();
      return this._parse_related_characteristic();
    };

    DataPropertyParser.prototype.get_model_by_iri = function(iri) {
      var dp, dps,
        _this = this;
      dps = this.data_properties.filter(function(dp) {
        return dp.iri === iri;
      });
      dp = dps[0];
      if (!!dp) {
        return dp;
      }
      return this._get_default_mode_by_iri(iri);
    };

    DataPropertyParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = DataPropertyParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    DataPropertyParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration DataProperty').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    DataPropertyParser.prototype._build_model = function(iri) {
      var data_property;
      data_property = new OntologyDataProperty(iri);
      this.data_properties.push(data_property);
      return data_property;
    };

    DataPropertyParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubDataPropertyOf').each(function(i, dom) {
        var dps, ele, parent_iri, sub_iri;
        ele = jQuery(dom);
        dps = ele.find('DataProperty');
        sub_iri = jQuery(dps[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(dps[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(dps[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(dps[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    DataPropertyParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      parent.add_sub_data_property(sub);
      return sub.add_parent_data_property(parent);
    };

    DataPropertyParser.prototype._parse_equivalence_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('EquivalentDataProperties').each(function(i, dom) {
        var dps, ele, iri, other_iri;
        ele = jQuery(dom);
        dps = ele.find('DataProperty');
        iri = jQuery(dps[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(dps[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(dps[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(dps[1]).attr('abbreviatedIRI');
        }
        return _this._build_equivalence_model(iri, other_iri);
      });
    };

    DataPropertyParser.prototype._build_equivalence_model = function(iri, other_iri) {
      var dp, other_dp;
      dp = this.get_model_by_iri(iri);
      other_dp = this.get_model_by_iri(other_iri);
      dp.add_equivalence_data_property(other_dp);
      return other_dp.add_equivalence_data_property(dp);
    };

    DataPropertyParser.prototype._parse_disjoint_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DisjointDataProperties').each(function(i, dom) {
        var dps, ele, iri, other_iri;
        ele = jQuery(dom);
        dps = ele.find('DataProperty');
        iri = jQuery(dps[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(dps[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(dps[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(dps[1]).attr('abbreviatedIRI');
        }
        return _this._build_disjoint_model(iri, other_iri);
      });
    };

    DataPropertyParser.prototype._build_disjoint_model = function(iri, other_iri) {
      var dp, other_dp;
      dp = this.get_model_by_iri(iri);
      other_dp = this.get_model_by_iri(other_iri);
      dp.add_disjoint_data_property(other_dp);
      return other_dp.add_disjoint_data_property(dp);
    };

    DataPropertyParser.prototype._parse_related_domain_thing = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DataPropertyDomain').each(function(i, dom) {
        var ele, iri, thing_iri;
        ele = jQuery(dom);
        iri = ele.find('DataProperty').attr('IRI');
        if (!iri) {
          iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        return _this._build_related_domain_thing(iri, thing_iri);
      });
    };

    DataPropertyParser.prototype._build_related_domain_thing = function(iri, thing_iri) {
      var dp, thing;
      dp = this.get_model_by_iri(iri);
      thing = this.owl_parser.thing_parser.get_model_by_iri(thing_iri);
      return dp.add_domain_thing(thing);
    };

    DataPropertyParser.prototype._parse_related_range_data_type = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DataPropertyRange').each(function(i, dom) {
        var dp_iri, dt_iri, ele;
        ele = jQuery(dom);
        dp_iri = ele.find('DataProperty').attr('IRI');
        if (!dp_iri) {
          dp_iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        dt_iri = ele.find('Datatype').attr('IRI');
        if (!dt_iri) {
          dt_iri = ele.find('Datatype').attr('abbreviatedIRI');
        }
        return _this._build_related_range_data_type(dp_iri, dt_iri);
      });
    };

    DataPropertyParser.prototype._build_related_range_data_type = function(dp_iri, dt_iri) {
      var dp, dt;
      dp = this.get_model_by_iri(dp_iri);
      dt = this.owl_parser.data_type_parser.get_model_by_iri(dt_iri);
      return dp.add_range_data_type(dt);
    };

    DataPropertyParser.prototype._parse_related_characteristic = function() {
      var name, value, _ref, _results,
        _this = this;
      _ref = DataPropertyParser.characteristic_data;
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        _results.push(this.owl_parser.owl_doc.find(name).each(function(i, dom) {
          var iri;
          iri = jQuery(dom).find('DataProperty').attr('IRI');
          if (!iri) {
            iri = jQuery(dom).find('DataProperty').attr('abbreviatedIRI');
          }
          return _this._build_related_characteristic(iri, value);
        }));
      }
      return _results;
    };

    DataPropertyParser.prototype._build_related_characteristic = function(iri, characteristic) {
      var dp;
      dp = this.get_model_by_iri(iri);
      return dp.add_characteristic(characteristic);
    };

    return DataPropertyParser;

  })();

  jQuery.extend(window, {
    DataPropertyParser: DataPropertyParser
  });

  DataTypeParser = (function() {

    DataTypeParser.DEFAULT_IRIS = ["rdf:PlainLiteral", "xsd:anyURI", "xsd:base64Binary", "xsd:boolean", "xsd:byte", "xsd:dateTime", "xsd:dateTimeStamp", "xsd:decimal", "xsd:double", "xsd:float", "xsd:hexBinary", "xsd:int", "xsd:integer", "xsd:language", "xsd:Literal", "xsd:long", "xsd:Name", "xsd:NCName", "xsd:negativeInteger", "xsd:NMTOKEN", "xsd:nonNegativeInteger", "xsd:nonPositiveInteger", "xsd:normalizedString", "xsd:positiveInteger", "xsd:rational", "xsd:real", "xsd:short", "xsd:string", "xsd:token", "xsd:unsignedByte", "xsd:unsignedInt", "xsd:unsignedLong", "xsd:unsignedShort", "xsd:XMLLiteral"];

    function DataTypeParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.data_types = [];
    }

    DataTypeParser.prototype.build_model = function() {
      return this._parse_model();
    };

    DataTypeParser.prototype.build_related = function() {};

    DataTypeParser.prototype.get_model_by_iri = function(bug_iri) {
      var dt, dts, iri,
        _this = this;
      iri = this._get_fix_bug_iri(bug_iri);
      dts = this.data_types.filter(function(dt) {
        return dt.iri === iri;
      });
      dt = dts[0];
      if (!!dt) {
        return dt;
      }
      return this._get_default_mode_by_iri(iri);
    };

    DataTypeParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = DataTypeParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    DataTypeParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration Datatype').each(function(i, dom) {
        var iri;
        iri = jQuery(dom).attr('IRI');
        return _this._build_model(iri);
      });
    };

    DataTypeParser.prototype._build_model = function(iri) {
      var dt;
      dt = new OntologyDataType(iri);
      this.data_types.push(dt);
      return dt;
    };

    DataTypeParser.prototype._get_fix_bug_iri = function(iri) {
      var reg;
      if (!iri) {
        return null;
      }
      reg = iri.match(/&(\S+);(\S+)/);
      if (!!reg) {
        return "" + reg[1] + ":" + reg[2];
      }
      reg = iri.match(/\S+(#\S+)/);
      if (!!reg) {
        return reg[1];
      }
      return iri;
    };

    return DataTypeParser;

  })();

  jQuery.extend(window, {
    DataTypeParser: DataTypeParser
  });

  IndividualParser = (function() {

    function IndividualParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.individuals = [];
    }

    IndividualParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_same_model();
      return this._parse_different_model();
    };

    IndividualParser.prototype.build_related = function() {
      this._parse_related_thing();
      this._parse_related_object_property_value();
      return this._parse_related_data_property_value();
    };

    IndividualParser.prototype.get_model_by_iri = function(iri) {
      var individuals,
        _this = this;
      individuals = this.individuals.filter(function(indi) {
        return indi.iri === iri;
      });
      return individuals[0];
    };

    IndividualParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration NamedIndividual').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    IndividualParser.prototype._build_model = function(iri) {
      var indi;
      indi = new OntologyIndividual(iri);
      if (!this.individuals) {
        this.individuals = [];
      }
      return this.individuals.push(indi);
    };

    IndividualParser.prototype._parse_same_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SameIndividual').each(function(i, dom) {
        var ele, indis, iri, other_iri;
        ele = jQuery(dom);
        indis = ele.find('NamedIndividual');
        iri = jQuery(indis[0]).attr('IRI');
        other_iri = jQuery(indis[1]).attr('IRI');
        return _this._build_same_model(iri, other_iri);
      });
    };

    IndividualParser.prototype._build_same_model = function(iri, other_iri) {
      var indi, other_indi;
      indi = this.get_model_by_iri(iri);
      other_indi = this.get_model_by_iri(other_iri);
      indi.add_same_individual(other_indi);
      return other_indi.add_same_individual(indi);
    };

    IndividualParser.prototype._parse_different_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DifferentIndividuals').each(function(i, dom) {
        var ele, indis, iri, other_iri;
        ele = jQuery(dom);
        indis = ele.find('NamedIndividual');
        iri = jQuery(indis[0]).attr('IRI');
        other_iri = jQuery(indis[1]).attr('IRI');
        return _this._build_different_model(iri, other_iri);
      });
    };

    IndividualParser.prototype._build_different_model = function(iri, other_iri) {
      var indi, other_indi;
      indi = this.get_model_by_iri(iri);
      other_indi = this.get_model_by_iri(other_iri);
      indi.add_different_individual(other_indi);
      return other_indi.add_different_individual(indi);
    };

    IndividualParser.prototype._parse_related_thing = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ClassAssertion').each(function(i, dom) {
        var ele, individual_iri, thing_iri;
        ele = jQuery(dom);
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        individual_iri = ele.find('NamedIndividual').attr('IRI');
        return _this._build_related_thing(thing_iri, individual_iri);
      });
    };

    IndividualParser.prototype._build_related_thing = function(thing_iri, individual_iri) {
      var individual, thing;
      thing = this.owl_parser.thing_parser.get_model_by_iri(thing_iri);
      individual = this.get_model_by_iri(individual_iri);
      return individual.add_thing(thing);
    };

    IndividualParser.prototype._parse_related_object_property_value = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ObjectPropertyAssertion').each(function(i, dom) {
        var ele, indi_iri, indis, op_iri, value_indi_iri;
        ele = jQuery(dom);
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        indis = ele.find('NamedIndividual');
        indi_iri = jQuery(indis[0]).attr('IRI');
        value_indi_iri = jQuery(indis[1]).attr('IRI');
        return _this._build_related_object_property_value(indi_iri, op_iri, value_indi_iri);
      });
    };

    IndividualParser.prototype._build_related_object_property_value = function(indi_iri, op_iri, value_indi_iri) {
      var indi, op, opv, value;
      indi = this.get_model_by_iri(indi_iri);
      value = this.get_model_by_iri(value_indi_iri);
      op = this.owl_parser.object_property_parser.get_model_by_iri(op_iri);
      opv = new OntologyObjectPropertyValue(op, value);
      return indi.add_object_property_value(opv);
    };

    IndividualParser.prototype._parse_related_data_property_value = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DataPropertyAssertion').each(function(i, dom) {
        var data_type_iri, dp_iri, ele, indi_iri, value;
        ele = jQuery(dom);
        dp_iri = ele.find('DataProperty').attr('IRI');
        if (!dp_iri) {
          dp_iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        indi_iri = ele.find('NamedIndividual').attr('IRI');
        data_type_iri = ele.find('Literal').attr('datatypeIRI');
        value = ele.find('Literal').html();
        return _this._build_related_data_property_value(indi_iri, dp_iri, data_type_iri, value);
      });
    };

    IndividualParser.prototype._build_related_data_property_value = function(indi_iri, dp_iri, data_type_iri, value) {
      var data_type, dp, dpv, dtv, indi;
      indi = this.get_model_by_iri(indi_iri);
      dp = this.owl_parser.data_property_parser.get_model_by_iri(dp_iri);
      data_type = this.owl_parser.data_type_parser.get_model_by_iri(data_type_iri);
      dtv = new OntologyDataTypeValue(data_type, value);
      dpv = new OntologyDataPropertyValue(dp, dtv);
      return indi.add_data_property_value(dpv);
    };

    return IndividualParser;

  })();

  jQuery.extend(window, {
    IndividualParser: IndividualParser
  });

  ObjectPropertyParser = (function() {

    ObjectPropertyParser.characteristic_data = {
      'FunctionalObjectProperty': OntologyCharacteristic.FUNCTIONAL,
      'InverseFunctionalObjectProperty': OntologyCharacteristic.INVERSE_FUNCTIONAL,
      'SymmetricObjectProperty': OntologyCharacteristic.SYMMETRIC,
      'AsymmetricObjectProperty': OntologyCharacteristic.ASYMMETRIC,
      'TransitiveObjectProperty': OntologyCharacteristic.TRANSITIVE,
      'ReflexiveObjectProperty': OntologyCharacteristic.REFLEXIVE,
      'IrreflexiveObjectProperty': OntologyCharacteristic.IRREFLEXIVE
    };

    ObjectPropertyParser.DEFAULT_IRIS = ['owl:topObjectProperty'];

    function ObjectPropertyParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.object_properties = [];
    }

    ObjectPropertyParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_sub_and_parent_model();
      this._parse_equivalence_model();
      this._parse_inverse_model();
      return this._parse_disjoint_model();
    };

    ObjectPropertyParser.prototype.build_related = function() {
      this._parse_related_domain_thing();
      this._parse_realted_range_thing();
      return this._parse_related_characteristic();
    };

    ObjectPropertyParser.prototype.get_model_by_iri = function(iri) {
      var an, ans,
        _this = this;
      ans = this.object_properties.filter(function(an) {
        return an.iri === iri;
      });
      an = ans[0];
      if (!!an) {
        return an;
      }
      return this._get_default_mode_by_iri(iri);
    };

    ObjectPropertyParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = ObjectPropertyParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    ObjectPropertyParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration ObjectProperty').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    ObjectPropertyParser.prototype._build_model = function(iri) {
      var odp;
      odp = new OntologyObjectProperty(iri);
      this.object_properties.push(odp);
      return odp;
    };

    ObjectPropertyParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubObjectPropertyOf').each(function(i, dom) {
        var ele, ops, parent_iri, sub_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        sub_iri = jQuery(ops[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(ops[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    ObjectPropertyParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      parent.add_sub_object_property(sub);
      return sub.add_parent_object_property(parent);
    };

    ObjectPropertyParser.prototype._parse_equivalence_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('EquivalentObjectProperties').each(function(i, dom) {
        var ele, iri, ops, other_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        iri = jQuery(ops[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(ops[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_equivalence_model(iri, other_iri);
      });
    };

    ObjectPropertyParser.prototype._build_equivalence_model = function(iri, other_iri) {
      var op, other_op;
      op = this.get_model_by_iri(iri);
      other_op = this.get_model_by_iri(other_iri);
      op.add_equivalence_object_property(other_op);
      return other_op.add_equivalence_object_property(op);
    };

    ObjectPropertyParser.prototype._parse_inverse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('InverseObjectProperties').each(function(i, dom) {
        var ele, iri, ops, other_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        iri = jQuery(ops[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(ops[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_inverse_model(iri, other_iri);
      });
    };

    ObjectPropertyParser.prototype._build_inverse_model = function(iri, other_iri) {
      var op, other_op;
      op = this.get_model_by_iri(iri);
      other_op = this.get_model_by_iri(other_iri);
      op.add_inverse_object_property(other_op);
      return other_op.add_inverse_object_property(op);
    };

    ObjectPropertyParser.prototype._parse_disjoint_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DisjointObjectProperties').each(function(i, dom) {
        var ele, iri, ops, other_iri;
        ele = jQuery(dom);
        ops = ele.find('ObjectProperty');
        iri = jQuery(ops[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(ops[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(ops[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(ops[1]).attr('abbreviatedIRI');
        }
        return _this._build_disjoint_model(iri, other_iri);
      });
    };

    ObjectPropertyParser.prototype._build_disjoint_model = function(iri, other_iri) {
      var op, other_op;
      op = this.get_model_by_iri(iri);
      other_op = this.get_model_by_iri(other_iri);
      op.add_disjoint_object_property(other_op);
      return other_op.add_disjoint_object_property(op);
    };

    ObjectPropertyParser.prototype._parse_related_domain_thing = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ObjectPropertyDomain').each(function(i, dom) {
        var ele, op_iri, thing_iri;
        ele = jQuery(dom);
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        return _this._build_related_domain_thing(op_iri, thing_iri);
      });
    };

    ObjectPropertyParser.prototype._build_related_domain_thing = function(op_iri, thing_iri) {
      var op, thing;
      op = this.get_model_by_iri(op_iri);
      thing = this.owl_parser.thing_parser.get_model_by_iri(thing_iri);
      return op.add_domain_thing(thing);
    };

    ObjectPropertyParser.prototype._parse_realted_range_thing = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ObjectPropertyRange').each(function(i, dom) {
        var ele, op_iri, thing_iri;
        ele = jQuery(dom);
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        return _this._build_realted_range_thing(op_iri, thing_iri);
      });
    };

    ObjectPropertyParser.prototype._build_realted_range_thing = function(op_iri, thing_iri) {
      var op, thing;
      op = this.get_model_by_iri(op_iri);
      thing = this.owl_parser.thing_parser.get_model_by_iri(thing_iri);
      return op.add_range_thing(thing);
    };

    ObjectPropertyParser.prototype._parse_related_characteristic = function() {
      var name, value, _ref, _results,
        _this = this;
      _ref = ObjectPropertyParser.characteristic_data;
      _results = [];
      for (name in _ref) {
        value = _ref[name];
        _results.push(this.owl_parser.owl_doc.find(name).each(function(i, dom) {
          var iri;
          iri = jQuery(dom).find('ObjectProperty').attr('IRI');
          if (!iri) {
            iri = jQuery(dom).find('ObjectProperty').attr('abbreviatedIRI');
          }
          return _this._build_related_characteristic(iri, value);
        }));
      }
      return _results;
    };

    ObjectPropertyParser.prototype._build_related_characteristic = function(iri, characteristic) {
      var op;
      op = this.get_model_by_iri(iri);
      return op.add_characteristic(characteristic);
    };

    return ObjectPropertyParser;

  })();

  jQuery.extend(window, {
    ObjectPropertyParser: ObjectPropertyParser
  });

  OwlParser = (function() {

    function OwlParser(owl_text) {
      this.owl_text = owl_text;
      this.owl_doc = jQuery(this.owl_text);
      this.annotation_parser = new AnnotationParser(this);
      this.thing_parser = new ThingParser(this);
      this.individual_parser = new IndividualParser(this);
      this.object_property_parser = new ObjectPropertyParser(this);
      this.data_property_parser = new DataPropertyParser(this);
      this.data_type_parser = new DataTypeParser(this);
      this.parsers = [this.annotation_parser, this.thing_parser, this.individual_parser, this.object_property_parser, this.data_property_parser, this.data_type_parser];
    }

    OwlParser.prototype.build = function() {
      this._build_model();
      this._build_related();
      return new Ontology(this);
    };

    OwlParser.prototype.get_model_by_iri = function(iri) {
      var model, parser, _i, _len, _ref;
      _ref = this.parsers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parser = _ref[_i];
        model = parser.get_model_by_iri(iri);
        if (!!model) {
          return model;
        }
      }
      return null;
    };

    OwlParser.prototype._build_model = function() {
      this.annotation_parser.build_model();
      this.thing_parser.build_model();
      this.individual_parser.build_model();
      this.object_property_parser.build_model();
      this.data_property_parser.build_model();
      return this.data_type_parser.build_model();
    };

    OwlParser.prototype._build_related = function() {
      this.annotation_parser.build_related();
      this.thing_parser.build_related();
      this.individual_parser.build_related();
      this.object_property_parser.build_related();
      this.data_property_parser.build_related();
      return this.data_type_parser.build_related();
    };

    return OwlParser;

  })();

  jQuery.extend(window, {
    OwlParser: OwlParser
  });

  ThingParser = (function() {

    ThingParser.DEFAULT_IRIS = ['owl:Thing'];

    function ThingParser(owl_parser) {
      this.owl_parser = owl_parser;
      this.things = [];
    }

    ThingParser.prototype.build_model = function() {
      this._parse_model();
      this._parse_sub_and_parent_model();
      this._parse_equivalence_model();
      return this._parse_disjoint_model();
    };

    ThingParser.prototype.build_related = function() {
      this._parse_related_individual();
      this._parse_related_object_property();
      return this._parse_related_data_property();
    };

    ThingParser.prototype.get_model_by_iri = function(iri) {
      var thing, things,
        _this = this;
      things = this.things.filter(function(thing) {
        return thing.iri === iri;
      });
      thing = things[0];
      if (!!thing) {
        return thing;
      }
      return this._get_default_mode_by_iri(iri);
    };

    ThingParser.prototype._get_default_mode_by_iri = function(iri) {
      var i;
      i = ThingParser.DEFAULT_IRIS.indexOf(iri);
      if (i === -1) {
        return null;
      }
      return this._build_model(iri);
    };

    ThingParser.prototype._parse_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('Declaration Class').each(function(i, dom) {
        var ele, iri;
        ele = jQuery(dom);
        iri = ele.attr('IRI');
        return _this._build_model(iri);
      });
    };

    ThingParser.prototype._build_model = function(iri) {
      var thing;
      thing = new OntologyThing(iri);
      this.things.push(thing);
      return thing;
    };

    ThingParser.prototype._parse_sub_and_parent_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('SubClassOf').each(function(i, dom) {
        var ele, parent_iri, sub_iri, thing_eles;
        ele = jQuery(dom);
        thing_eles = ele.find('Class');
        sub_iri = jQuery(thing_eles[0]).attr('IRI');
        if (!sub_iri) {
          sub_iri = jQuery(thing_eles[0]).attr('abbreviatedIRI');
        }
        parent_iri = jQuery(thing_eles[1]).attr('IRI');
        if (!parent_iri) {
          parent_iri = jQuery(thing_eles[1]).attr('abbreviatedIRI');
        }
        return _this._build_sub_and_parent_model(sub_iri, parent_iri);
      });
    };

    ThingParser.prototype._build_sub_and_parent_model = function(sub_iri, parent_iri) {
      var parent, sub;
      sub = this.get_model_by_iri(sub_iri);
      parent = this.get_model_by_iri(parent_iri);
      parent.add_sub_thing(sub);
      return sub.add_parent_thing(parent);
    };

    ThingParser.prototype._parse_equivalence_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('EquivalentClasses').each(function(i, dom) {
        var ele, iri, other_iri, thing_eles;
        ele = jQuery(dom);
        thing_eles = ele.find('Class');
        iri = jQuery(thing_eles[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(thing_eles[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(thing_eles[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(thing_eles[1]).attr('abbreviatedIRI');
        }
        return _this._build_equivalence_model(iri, other_iri);
      });
    };

    ThingParser.prototype._build_equivalence_model = function(iri, other_iri) {
      var other_thing, thing;
      thing = this.get_model_by_iri(iri);
      other_thing = this.get_model_by_iri(other_iri);
      thing.add_equivalence_thing(other_thing);
      return other_thing.add_equivalence_thing(thing);
    };

    ThingParser.prototype._parse_disjoint_model = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('DisjointClasses').each(function(i, dom) {
        var ele, iri, other_iri, thing_eles;
        ele = jQuery(dom);
        thing_eles = ele.find('Class');
        iri = jQuery(thing_eles[0]).attr('IRI');
        if (!iri) {
          iri = jQuery(thing_eles[0]).attr('abbreviatedIRI');
        }
        other_iri = jQuery(thing_eles[1]).attr('IRI');
        if (!other_iri) {
          other_iri = jQuery(thing_eles[1]).attr('abbreviatedIRI');
        }
        return _this._build_disjoint_model(iri, other_iri);
      });
    };

    ThingParser.prototype._build_disjoint_model = function(iri, other_iri) {
      var other_thing, thing;
      thing = this.get_model_by_iri(iri);
      other_thing = this.get_model_by_iri(other_iri);
      thing.add_disjoint_thing(other_thing);
      return other_thing.add_disjoint_thing(thing);
    };

    ThingParser.prototype._parse_related_individual = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('ClassAssertion').each(function(i, dom) {
        var ele, individual_iri, thing_iri;
        ele = jQuery(dom);
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        individual_iri = ele.find('NamedIndividual').attr('IRI');
        return _this._build_related_individual(thing_iri, individual_iri);
      });
    };

    ThingParser.prototype._build_related_individual = function(thing_iri, individual_iri) {
      var individual, thing;
      thing = this.get_model_by_iri(thing_iri);
      individual = this.owl_parser.individual_parser.get_model_by_iri(individual_iri);
      return thing.add_individual(individual);
    };

    ThingParser.prototype._parse_related_object_property = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('HasKey').each(function(i, dom) {
        var ele, op_iri, thing_iri;
        ele = jQuery(dom);
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        op_iri = ele.find('ObjectProperty').attr('IRI');
        if (!op_iri) {
          op_iri = ele.find('ObjectProperty').attr('abbreviatedIRI');
        }
        if (!!op_iri) {
          return _this._build_related_object_property(thing_iri, op_iri);
        }
      });
    };

    ThingParser.prototype._build_related_object_property = function(thing_iri, op_iri) {
      var op, thing;
      thing = this.get_model_by_iri(thing_iri);
      op = this.owl_parser.object_property_parser.get_model_by_iri(op_iri);
      return thing.add_object_property(op);
    };

    ThingParser.prototype._parse_related_data_property = function() {
      var _this = this;
      return this.owl_parser.owl_doc.find('HasKey').each(function(i, dom) {
        var dp_iri, ele, thing_iri;
        ele = jQuery(dom);
        thing_iri = ele.find('Class').attr('IRI');
        if (!thing_iri) {
          thing_iri = ele.find('Class').attr('abbreviatedIRI');
        }
        dp_iri = ele.find('DataProperty').attr('IRI');
        if (!dp_iri) {
          dp_iri = ele.find('DataProperty').attr('abbreviatedIRI');
        }
        if (!!dp_iri) {
          return _this._build_related_data_property(thing_iri, dp_iri);
        }
      });
    };

    ThingParser.prototype._build_related_data_property = function(thing_iri, dp_iri) {
      var op, thing;
      thing = this.get_model_by_iri(thing_iri);
      op = this.owl_parser.data_property_parser.get_model_by_iri(dp_iri);
      return thing.add_data_property(op);
    };

    return ThingParser;

  })();

  jQuery.extend(window, {
    ThingParser: ThingParser
  });

}).call(this);
